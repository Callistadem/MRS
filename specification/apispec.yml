openapi: '3.0.2'
info:
  title: Malfunction Report System API
  version: '1.1'
  description:  
    Specification of Malfunction Report System API 
    developed for Gomibo.

servers:
  - url: http:/localhost:8000
    description: laravel backend

components:
  schemas:
    File: 
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        file_path:
          type: string
        created_at: 
          type: string
          format: date-time
          readOnly: true
        updated_at: 
          type: string
          format: date-time
          readOnly: true

    AuthLogin:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
        password:
          type: string
    
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        remember_token:
          type: string
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
        

    AuthRegister:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string

    Report:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
        priority:
          type: integer
          description: Priority of the Report
        status:
          type: integer
          description: Status of the Report (e.g. in progress, fixed)
        submitter_email:
          type: string
          description: Email of the report submitter
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time
        responses:
          type: array
          items:
            $ref: "#/components/schemas/Response"
        maintainers:
          type: array
          items: 
            $ref: "#/components/schemas/User"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
    
    ReportSummary:
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
        priority:
          type: integer
          description: Priority of the Report
        status:
          type: integer
          description: Status of the Report (e.g. in progress, fixed)
        submitter_email:
          type: string
          description: Email of the report submitter
        has_submitted_files:
          type: boolean

    GetReportsResponse:
      properties:
        body: 
          type: array
          items:
            $ref: "#/components/schemas/ReportSummary"
        current_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
    ReportPOSTBody:
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
        submitter_email:
          type: string
          description: Email of the report submitter
        responses:
          type: array
          items:
            $ref: "#/components/schemas/ResponseSummary"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
    ReportPATCHBody:
      properties:
        status:
          type: integer
        priority:
          type: integer
        user_id:
          type: integer

    Response:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question:
          $ref: "#/components/schemas/QuestionSummary"
        answer:
          $ref: "#/components/schemas/Answer"

    ResponseSummary:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question_id:
          type: integer
        answer_id:
          type: integer

    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question_description:
          type: string
        is_open:
          type: boolean
        is_active:
          type: boolean
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"

    QuestionState:
      type: object
      properties:
        is_active: 
          type: boolean

    QuestionSummary:
      type: object
      properties:
        question_description:
          type: string
        is_open:
          type: boolean
        answers:
          type: array
          items:
            type: string

    Answer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        answer:
          type: string
        question_id:
          type: integer
          readOnly: true

  responses:
    BadRequest:
      description: Request was not well-formed, see error details
      content:
        application/json:
          schema:
            type: object
            properties:
              error-message:
                type: string
                description: Error message detailing the problem with the request
    NotFound:
      description: Resource was not found.

  parameters:
    report-filter-status:
      name: status
      in: query
      required: false
      description: Filtering the results by status
      schema:
        type: integer
    report-filter-priority:
      name: priority
      in: query
      required: false
      description: Filtering the results by priority
      schema:
        type: integer
    report-pagination-page:
      name: page
      in: query
      # required: true
      description: Page for desired pagination of results.
      schema:
        type: integer
    report-sort-by:
      name: sort-by
      in: query
      required: false
      description: Sort by "priority", "date" or "status". Sorts by date by default.
      schema:
        type: string
    report-order:
      name: order
      in: query
      required: false
      description: Order results as "asc" or "desc". Order is descending by default.
      schema:
        type: string
    question-filter-is_active:
      name: active
      in: query
      required: false
      description: Filtering the results by is_active
      schema:
        type: boolean

paths:
  /login:
    post: 
      tags:
        - Authentication
      description: Tries to login with given user credentials.
      summary: login to a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthLogin"
      responses:
          '200':
            description: "OK"
          '422':
            description: "Unprocessable Content"
  /register:
    post: 
      tags:
        - Authentication
      description: Tries to register a new user (maintainer) from given credentials. (name is optional)
      summary: register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRegister"
      responses:
        '200':
          description: "OK"
        '422':
          description: "Unprocessable Content"

  /api/reports:
    get:
      tags:
        - Reports
      description: Retrieves a list of summarized reports filtered by the requested criteria.
      summary: Retrieve a list of reports
      parameters:
        - $ref: "#/components/parameters/report-filter-status"
        - $ref: "#/components/parameters/report-filter-priority"
        - $ref: "#/components/parameters/report-pagination-page"
        - $ref: "#/components/parameters/report-sort-by"
        - $ref: "#/components/parameters/report-order"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReportsResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
    post: 
      tags:
        - Reports
      description: Creates a new report.
      summary: Create a new report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportPOSTBody"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportPOSTBody"
        '422':
          description: "Unprocessable Content"
  
  /api/reports/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the report
        schema:
          type: integer
    get:
      tags:
        - Reports
      description: Retrieves a detailed single report with specified id.
      summary: Retrieve a single Report
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        '404':
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - Reports
      description: Update a reports status and/or priority.
      summary: Update report status and/or priority
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportPATCHBody"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportPATCHBody"
        '422':
          description: "Unprocessable Content"

  /api/questions:
    get:
      tags:
        - Questions
      description: Retrieves a list of questions filterable by active status.
      summary: Retrieve a list of questions
      parameters:
        - $ref: "#/components/parameters/question-filter-is_active"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
    post:
      tags:
        - Questions
      description: Creates a new question with either selectabe MC answers or a single empty answer for an open question  
      summary: Create a new question (mc or open)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionSummary"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        '400':
          $ref: "#/components/responses/BadRequest"
      
  /api/questions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the question
        schema:
          type: integer
    get:
      tags:
        - Questions
      description: Retrieves a single question for given ID.
      summary: Retrieve a question.
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        '404':
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - Questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionState"
      description: Updates the state of a question with ID provided.
      summary: Update the state of a question
      responses:
        '200':
         description: "OK"

  /api/answers:
    post:
      tags:
        - Answers
      description: Creates a new answer (used for answering an open question)
      summary: Create a new answer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Answer"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Answer"